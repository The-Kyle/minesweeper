{"ast":null,"code":"import _classCallCheck from \"/home/oejava/Projects/minesweeper/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/oejava/Projects/minesweeper/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/oejava/Projects/minesweeper/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/oejava/Projects/minesweeper/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/oejava/Projects/minesweeper/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/oejava/Projects/minesweeper/src/components/Board.js\";\nimport React from 'react';\nimport Cell from './Cell';\n\nvar Board =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Board, _React$Component);\n\n  function Board() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Board)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      boardData: _this.initBoardData(_this.props.height, _this.props.width, _this.props.mines),\n      gameWon: false,\n      mineCount: _this.props.mines\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"getMines\",\n    // get mines\n    value: function getMines(data) {\n      var mineArray = [];\n      data.map(function (datarow) {\n        datarow.map(function (dataitem) {\n          if (dataitem.isMine) {\n            mineArray.push(dataitem);\n          }\n        });\n      });\n      return mineArray;\n    } // get Flags\n\n  }, {\n    key: \"getFlags\",\n    value: function getFlags(data) {\n      var mineArray = [];\n      data.map(function (datarow) {\n        datarow.map(function (dataitem) {\n          if (dataitem.isFlagged) {\n            mineArray.push(dataitem);\n          }\n        });\n      });\n      return mineArray;\n    } // get Hidden cells\n\n  }, {\n    key: \"getHidden\",\n    value: function getHidden(data) {\n      var mineArray = [];\n      data.map(function (datarow) {\n        datarow.map(function (dataitem) {\n          if (!dataitem.isRevealed) {\n            mineArray.push(dataitem);\n          }\n        });\n      });\n      return mineArray;\n    } // get random number given a dimension\n\n  }, {\n    key: \"getRandomNumber\",\n    value: function getRandomNumber(dimension) {\n      // return Math.floor(Math.random() * dimension);\n      return Math.floor(Math.random() * 1000 + 1) % dimension;\n    } // Gets initial board data\n\n  }, {\n    key: \"initBoardData\",\n    value: function initBoardData(height, width, mines) {\n      var data = [];\n\n      for (var i = 0; i < height; i++) {\n        data.push([]);\n\n        for (var j = 0; j < width; j++) {\n          data[i][j] = {\n            x: i,\n            y: j,\n            isMine: false,\n            neighbour: 0,\n            isRevealed: false,\n            isEmpty: false,\n            isFlagged: false\n          };\n        }\n      }\n\n      data = this.plantMines(data, height, width, mines);\n      data = this.getNeighbours(data, height, width);\n      console.log(data);\n      return data;\n    } // plant mines on the board\n\n  }, {\n    key: \"plantMines\",\n    value: function plantMines(data, height, width, mines) {\n      var randomx,\n          randomy,\n          minesPlanted = 0;\n\n      while (minesPlanted < mines) {\n        randomx = this.getRandomNumber(width);\n        randomy = this.getRandomNumber(height);\n\n        if (!data[randomx][randomy].isMine) {\n          data[randomx][randomy].isMine = true;\n          minesPlanted++;\n        }\n      }\n\n      return data;\n    } // get number of neighbouring mines for each board cell\n\n  }, {\n    key: \"getNeighbours\",\n    value: function getNeighbours(data, height, width) {\n      var _this2 = this;\n\n      var updatedData = data,\n          index = 0;\n\n      for (var i = 0; i < height; i++) {\n        for (var j = 0; j < width; j++) {\n          if (data[i][j].isMine !== true) {\n            (function () {\n              var mine = 0;\n\n              var area = _this2.traverseBoard(data[i][j].x, data[i][j].y, data);\n\n              area.map(function (value) {\n                if (value.isMine) {\n                  mine++;\n                }\n              });\n\n              if (mine === 0) {\n                updatedData[i][j].isEmpty = true;\n              }\n\n              updatedData[i][j].neighbour = mine;\n            })();\n          }\n        }\n      }\n\n      return updatedData;\n    }\n  }, {\n    key: \"traverseBoard\",\n    // looks for neighbouring cells and returns them\n    value: function traverseBoard(x, y, data) {\n      var el = []; //up\n\n      if (x > 0) {\n        el.push(data[x - 1][y]);\n      } //down\n\n\n      if (x < this.props.height - 1) {\n        el.push(data[x + 1][y]);\n      } //left\n\n\n      if (y > 0) {\n        el.push(data[x][y - 1]);\n      } //right\n\n\n      if (y < this.props.width - 1) {\n        el.push(data[x][y + 1]);\n      } // top left\n\n\n      if (x > 0 && y > 0) {\n        el.push(data[x - 1][y - 1]);\n      } // top right\n\n\n      if (x > 0 && y < this.props.width - 1) {\n        el.push(data[x - 1][y + 1]);\n      } // bottom right\n\n\n      if (x < this.props.height - 1 && y < this.props.width - 1) {\n        el.push(data[x + 1][y + 1]);\n      } // bottom left\n\n\n      if (x < this.props.height - 1 && y > 0) {\n        el.push(data[x + 1][y - 1]);\n      }\n\n      return el;\n    } // reveals the whole board\n\n  }, {\n    key: \"revealBoard\",\n    value: function revealBoard() {\n      var updatedData = this.state.boardData;\n      updatedData.map(function (datarow) {\n        datarow.map(function (dataitem) {\n          dataitem.isRevealed = true;\n        });\n      });\n      this.setState({\n        boardData: updatedData\n      });\n    }\n    /* reveal logic for empty cell */\n\n  }, {\n    key: \"revealEmpty\",\n    value: function revealEmpty(x, y, data) {\n      var _this3 = this;\n\n      var area = this.traverseBoard(x, y, data);\n      area.map(function (value) {\n        if (!value.isRevealed && (value.isEmpty || !value.isMine)) {\n          data[value.x][value.y].isRevealed = true;\n\n          if (value.isEmpty) {\n            _this3.revealEmpty(value.x, value.y, data);\n          }\n        }\n      });\n      return data;\n    } // Handle User Events\n\n  }, {\n    key: \"handleCellClick\",\n    value: function handleCellClick(x, y) {\n      var win = false; // check if revealed. return if true.\n\n      if (this.state.boardData[x][y].isRevealed) return null; // check if mine. game over if true\n\n      if (this.state.boardData[x][y].isMine) {\n        this.revealBoard();\n        alert(\"game over\");\n      }\n\n      var updatedData = this.state.boardData;\n      updatedData[x][y].isFlagged = false;\n      updatedData[x][y].isRevealed = true;\n\n      if (updatedData[x][y].isEmpty) {\n        updatedData = this.revealEmpty(x, y, updatedData);\n      }\n\n      if (this.getHidden(updatedData).length === this.props.mines) {\n        win = true;\n        this.revealBoard();\n        alert(\"You Win\");\n      }\n\n      this.setState({\n        boardData: updatedData,\n        mineCount: this.props.mines - this.getFlags(updatedData).length,\n        gameWon: win\n      });\n    }\n  }, {\n    key: \"_handleContextMenu\",\n    value: function _handleContextMenu(e, x, y) {\n      e.preventDefault();\n      var updatedData = this.state.boardData;\n      var mines = this.state.mineCount;\n      var win = false; // check if already revealed\n\n      if (updatedData[x][y].isRevealed) return;\n\n      if (updatedData[x][y].isFlagged) {\n        updatedData[x][y].isFlagged = false;\n        mines++;\n      } else {\n        updatedData[x][y].isFlagged = true;\n        mines--;\n      }\n\n      if (mines === 0) {\n        var mineArray = this.getMines(updatedData);\n        var FlagArray = this.getFlags(updatedData);\n        win = JSON.stringify(mineArray) === JSON.stringify(FlagArray);\n\n        if (win) {\n          this.revealBoard();\n          alert(\"You Win\");\n        }\n      }\n\n      this.setState({\n        boardData: updatedData,\n        mineCount: mines,\n        gameWon: win\n      });\n    }\n  }, {\n    key: \"renderBoard\",\n    value: function renderBoard(data) {\n      var _this4 = this;\n\n      return data.map(function (datarow) {\n        return datarow.map(function (dataitem) {\n          return React.createElement(\"div\", {\n            key: dataitem.x * datarow.length + dataitem.y,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 275\n            },\n            __self: this\n          }, React.createElement(Cell, {\n            onClick: function onClick() {\n              return _this4.handleCellClick(dataitem.x, dataitem.y);\n            },\n            cMenu: function cMenu(e) {\n              return _this4._handleContextMenu(e, dataitem.x, dataitem.y);\n            },\n            value: dataitem,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 276\n            },\n            __self: this\n          }), datarow[datarow.length - 1] === dataitem ? React.createElement(\"div\", {\n            className: \"clear\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 281\n            },\n            __self: this\n          }) : \"\");\n        });\n      });\n    } // Component methods\n\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (JSON.stringify(this.props) !== JSON.stringify(nextProps)) {\n        this.setState({\n          boardData: this.initBoardData(nextProps.height, nextProps.width, nextProps.mines),\n          gameWon: false,\n          mineCount: nextProps.mines\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"game-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, \"mines: \", this.state.mineCount), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, this.state.gameWon ? \"You Win\" : \"\")), this.renderBoard(this.state.boardData));\n    }\n  }]);\n\n  return Board;\n}(React.Component);\n\nexport { Board as default };","map":{"version":3,"sources":["/home/oejava/Projects/minesweeper/src/components/Board.js"],"names":["React","Cell","Board","state","boardData","initBoardData","props","height","width","mines","gameWon","mineCount","data","mineArray","map","datarow","dataitem","isMine","push","isFlagged","isRevealed","dimension","Math","floor","random","i","j","x","y","neighbour","isEmpty","plantMines","getNeighbours","console","log","randomx","randomy","minesPlanted","getRandomNumber","updatedData","index","mine","area","traverseBoard","value","el","setState","revealEmpty","win","revealBoard","alert","getHidden","length","getFlags","e","preventDefault","getMines","FlagArray","JSON","stringify","handleCellClick","_handleContextMenu","nextProps","renderBoard","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nexport default class Board extends React.Component {\r\n    state = {\r\n        boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\r\n        gameWon: false,\r\n        mineCount: this.props.mines,\r\n    };\r\n\r\n    // get mines\r\n    getMines(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (dataitem.isMine) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n    // get Flags\r\n    getFlags(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (dataitem.isFlagged) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n    // get Hidden cells\r\n    getHidden(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (!dataitem.isRevealed) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n    // get random number given a dimension\r\n    getRandomNumber(dimension) {\r\n        // return Math.floor(Math.random() * dimension);\r\n        return Math.floor((Math.random() * 1000) + 1) % dimension;\r\n    }\r\n\r\n    // Gets initial board data\r\n    initBoardData(height, width, mines) {\r\n        let data = [];\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            data.push([]);\r\n            for (let j = 0; j < width; j++) {\r\n                data[i][j] = {\r\n                    x: i,\r\n                    y: j,\r\n                    isMine: false,\r\n                    neighbour: 0,\r\n                    isRevealed: false,\r\n                    isEmpty: false,\r\n                    isFlagged: false,\r\n                };\r\n            }\r\n        }\r\n        data = this.plantMines(data, height, width, mines);\r\n        data = this.getNeighbours(data, height, width);\r\n        console.log(data);\r\n        return data;\r\n    }\r\n\r\n    // plant mines on the board\r\n    plantMines(data, height, width, mines) {\r\n        let randomx, randomy, minesPlanted = 0;\r\n\r\n        while (minesPlanted < mines) {\r\n            randomx = this.getRandomNumber(width);\r\n            randomy = this.getRandomNumber(height);\r\n            if (!(data[randomx][randomy].isMine)) {\r\n                data[randomx][randomy].isMine = true;\r\n                minesPlanted++;\r\n            }\r\n        }\r\n\r\n        return (data);\r\n    }\r\n\r\n    // get number of neighbouring mines for each board cell\r\n    getNeighbours(data, height, width) {\r\n        let updatedData = data, index = 0;\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            for (let j = 0; j < width; j++) {\r\n                if (data[i][j].isMine !== true) {\r\n                    let mine = 0;\r\n                    const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\r\n                    area.map(value => {\r\n                        if (value.isMine) {\r\n                            mine++;\r\n                        }\r\n                    });\r\n                    if (mine === 0) {\r\n                        updatedData[i][j].isEmpty = true;\r\n                    }\r\n                    updatedData[i][j].neighbour = mine;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (updatedData);\r\n    };\r\n\r\n    // looks for neighbouring cells and returns them\r\n    traverseBoard(x, y, data) {\r\n        const el = [];\r\n\r\n        //up\r\n        if (x > 0) {\r\n            el.push(data[x - 1][y]);\r\n        }\r\n\r\n        //down\r\n        if (x < this.props.height - 1) {\r\n            el.push(data[x + 1][y]);\r\n        }\r\n\r\n        //left\r\n        if (y > 0) {\r\n            el.push(data[x][y - 1]);\r\n        }\r\n\r\n        //right\r\n        if (y < this.props.width - 1) {\r\n            el.push(data[x][y + 1]);\r\n        }\r\n\r\n        // top left\r\n        if (x > 0 && y > 0) {\r\n            el.push(data[x - 1][y - 1]);\r\n        }\r\n\r\n        // top right\r\n        if (x > 0 && y < this.props.width - 1) {\r\n            el.push(data[x - 1][y + 1]);\r\n        }\r\n\r\n        // bottom right\r\n        if (x < this.props.height - 1 && y < this.props.width - 1) {\r\n            el.push(data[x + 1][y + 1]);\r\n        }\r\n\r\n        // bottom left\r\n        if (x < this.props.height - 1 && y > 0) {\r\n            el.push(data[x + 1][y - 1]);\r\n        }\r\n\r\n        return el;\r\n    }\r\n\r\n    // reveals the whole board\r\n    revealBoard() {\r\n        let updatedData = this.state.boardData;\r\n        updatedData.map((datarow) => {\r\n            datarow.map((dataitem) => {\r\n                dataitem.isRevealed = true;\r\n            });\r\n        });\r\n        this.setState({\r\n            boardData: updatedData\r\n        })\r\n    }\r\n\r\n    /* reveal logic for empty cell */\r\n    revealEmpty(x, y, data) {\r\n        let area = this.traverseBoard(x, y, data);\r\n        area.map(value => {\r\n            if (!value.isRevealed && (value.isEmpty || !value.isMine)) {\r\n                data[value.x][value.y].isRevealed = true;\r\n                if (value.isEmpty) {\r\n                    this.revealEmpty(value.x, value.y, data);\r\n                }\r\n            }\r\n        });\r\n        return data;\r\n\r\n    }\r\n\r\n    // Handle User Events\r\n\r\n    handleCellClick(x, y) {\r\n        let win = false;\r\n\r\n        // check if revealed. return if true.\r\n        if (this.state.boardData[x][y].isRevealed) return null;\r\n\r\n        // check if mine. game over if true\r\n        if (this.state.boardData[x][y].isMine) {\r\n            this.revealBoard();\r\n            alert(\"game over\");\r\n        }\r\n\r\n        let updatedData = this.state.boardData;\r\n        updatedData[x][y].isFlagged = false;\r\n        updatedData[x][y].isRevealed = true;\r\n\r\n        if (updatedData[x][y].isEmpty) {\r\n            updatedData = this.revealEmpty(x, y, updatedData);\r\n        }\r\n\r\n        if (this.getHidden(updatedData).length === this.props.mines) {\r\n            win = true;\r\n            this.revealBoard();\r\n            alert(\"You Win\");\r\n        }\r\n\r\n        this.setState({\r\n            boardData: updatedData,\r\n            mineCount: this.props.mines - this.getFlags(updatedData).length,\r\n            gameWon: win,\r\n        });\r\n    }\r\n\r\n    _handleContextMenu(e, x, y) {\r\n        e.preventDefault();\r\n        let updatedData = this.state.boardData;\r\n        let mines = this.state.mineCount;\r\n        let win = false;\r\n\r\n        // check if already revealed\r\n        if (updatedData[x][y].isRevealed) return;\r\n\r\n        if (updatedData[x][y].isFlagged) {\r\n            updatedData[x][y].isFlagged = false;\r\n            mines++;\r\n        } else {\r\n            updatedData[x][y].isFlagged = true;\r\n            mines--;\r\n        }\r\n\r\n        if (mines === 0) {\r\n            const mineArray = this.getMines(updatedData);\r\n            const FlagArray = this.getFlags(updatedData);\r\n            win = (JSON.stringify(mineArray) === JSON.stringify(FlagArray));\r\n            if (win) {\r\n                this.revealBoard();\r\n                alert(\"You Win\");\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            boardData: updatedData,\r\n            mineCount: mines,\r\n            gameWon: win,\r\n        });\r\n    }\r\n\r\n    renderBoard(data) {\r\n        return data.map((datarow) => {\r\n            return datarow.map((dataitem) => {\r\n                return (\r\n                    <div key={dataitem.x * datarow.length + dataitem.y}>\r\n                        <Cell\r\n                            onClick={() => this.handleCellClick(dataitem.x, dataitem.y)}\r\n                            cMenu={(e) => this._handleContextMenu(e, dataitem.x, dataitem.y)}\r\n                            value={dataitem}\r\n                        />\r\n                        {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\r\n                    </div>);\r\n            })\r\n        });\r\n\r\n    }\r\n    // Component methods\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(this.props) !== JSON.stringify(nextProps)) {\r\n            this.setState({\r\n                boardData: this.initBoardData(nextProps.height, nextProps.width, nextProps.mines),\r\n                gameWon: false,\r\n                mineCount: nextProps.mines,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"board\">\r\n                <div className=\"game-info\">\r\n                    <span className=\"info\">mines: {this.state.mineCount}</span><br />\r\n                    <span className=\"info\">{this.state.gameWon ? \"You Win\" : \"\"}</span>\r\n                </div>\r\n                {\r\n                    this.renderBoard(this.state.boardData)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}