{"map":"{\"version\":3,\"sources\":[\"/home/oejava/Projects/minesweeper/src/components/Cell.js\",\"/home/oejava/Projects/minesweeper/src/components/Board.js\",\"/home/oejava/Projects/minesweeper/src/index.js\"],\"names\":[\"Cell\",\"this\",\"props\",\"value\",\"isRevealed\",\"isMine\",\"neighbour\",\"isFlagged\",\"className\",\"react_default\",\"a\",\"createElement\",\"ref\",\"onClick\",\"onContextMenu\",\"cMenu\",\"getValue\",\"React\",\"Component\",\"Board\",\"state\",\"boardData\",\"_this\",\"initBoardData\",\"height\",\"width\",\"mines\",\"gameWon\",\"mineCount\",\"data\",\"mineArray\",\"map\",\"datarow\",\"dataitem\",\"push\",\"dimension\",\"Math\",\"floor\",\"random\",\"i\",\"j\",\"x\",\"y\",\"isEmpty\",\"plantMines\",\"getNeighbours\",\"console\",\"log\",\"randomx\",\"randomy\",\"minesPlanted\",\"getRandomNumber\",\"_this2\",\"updatedData\",\"mine\",\"traverseBoard\",\"el\",\"setState\",\"_this3\",\"revealEmpty\",\"win\",\"revealBoard\",\"alert\",\"getHidden\",\"length\",\"getFlags\",\"e\",\"preventDefault\",\"getMines\",\"FlagArray\",\"JSON\",\"stringify\",\"_this4\",\"key\",\"Cell_Cell\",\"handleCellClick\",\"_handleContextMenu\",\"nextProps\",\"renderBoard\",\"Game\",\"handleGameStart\",\"difficulty\",\"document\",\"querySelector\",\"_this$state\",\"id\",\"Board_Board\",\"ReactDOM\",\"render\",\"src_Game\",\"getElementById\"],\"mappings\":\"4LAEqBA,qLAIb,OAAKC,KAAKC,MAAMC,MAAMC,WAGlBH,KAAKC,MAAMC,MAAME,OACV,eAEuB,IAA/BJ,KAAKC,MAAMC,MAAMG,UACT,KAEJL,KAAKC,MAAMC,MAAMG,UARbL,KAAKC,MAAMC,MAAMI,UAAY,SAAM,sCAY9C,IAAIC,EAAY,QAAUP,KAAKC,MAAMC,MAAMC,WAAa,GAAK,YAAcH,KAAKC,MAAMC,MAAME,OAAS,WAAa,KAAOJ,KAAKC,MAAMC,MAAMI,UAAY,WAAa,IAGnK,OACIE,EAAAC,EAAAC,cAAA,MAAA,CAAKC,IAAI,OAAOC,QAASZ,KAAKC,MAAMW,QAASL,UAAWA,EAAWM,cAAeb,KAAKC,MAAMa,OACxFd,KAAKe,mBAtBYC,EAAAA,EAAMC,WCCnBC,6MACjBC,MAAQ,CACJC,UAAWC,EAAKC,cAAcD,EAAKpB,MAAMsB,OAAQF,EAAKpB,MAAMuB,MAAOH,EAAKpB,MAAMwB,OAC9EC,SAAS,EACTC,UAAWN,EAAKpB,MAAMwB,+EAIjBG,GACL,IAAIC,EAAY,GAUhB,OARAD,EAAKE,IAAI,SAAAC,GACLA,EAAQD,IAAI,SAACE,GACLA,EAAS5B,QACTyB,EAAUI,KAAKD,OAKpBH,mCAIFD,GACL,IAAIC,EAAY,GAUhB,OARAD,EAAKE,IAAI,SAAAC,GACLA,EAAQD,IAAI,SAACE,GACLA,EAAS1B,WACTuB,EAAUI,KAAKD,OAKpBH,oCAIDD,GACN,IAAIC,EAAY,GAUhB,OARAD,EAAKE,IAAI,SAAAC,GACLA,EAAQD,IAAI,SAACE,GACJA,EAAS7B,YACV0B,EAAUI,KAAKD,OAKpBH,0CAIKK,GAEZ,OAAOC,KAAKC,MAAuB,IAAhBD,KAAKE,SAAmB,GAAKH,wCAItCX,EAAQC,EAAOC,GAGzB,IAFA,IAAIG,EAAO,GAEFU,EAAI,EAAGA,EAAIf,EAAQe,IAAK,CAC7BV,EAAKK,KAAK,IACV,IAAK,IAAIM,EAAI,EAAGA,EAAIf,EAAOe,IACvBX,EAAKU,GAAGC,GAAK,CACTC,EAAGF,EACHG,EAAGF,EACHnC,QAAQ,EACRC,UAAW,EACXF,YAAY,EACZuC,SAAS,EACTpC,WAAW,GAOvB,OAHAsB,EAAO5B,KAAK2C,WAAWf,EAAML,EAAQC,EAAOC,GAC5CG,EAAO5B,KAAK4C,cAAchB,EAAML,EAAQC,GACxCqB,QAAQC,IAAIlB,GACLA,qCAIAA,EAAML,EAAQC,EAAOC,GAG5B,IAFA,IAAIsB,EAASC,EAASC,EAAe,EAE9BA,EAAexB,GAClBsB,EAAU/C,KAAKkD,gBAAgB1B,GAC/BwB,EAAUhD,KAAKkD,gBAAgB3B,GACzBK,EAAKmB,GAASC,GAAS5C,SACzBwB,EAAKmB,GAASC,GAAS5C,QAAS,EAChC6C,KAIR,OAAQrB,wCAIEA,EAAML,EAAQC,GAGxB,IAH+B,IAAA2B,EAAAnD,KAC3BoD,EAAcxB,EAETU,EAAI,EAAGA,EAAIf,EAAQe,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAAOe,KACG,IAAtBX,EAAKU,GAAGC,GAAGnC,QAAiB,WAC5B,IAAIiD,EAAO,EACEF,EAAKG,cAAc1B,EAAKU,GAAGC,GAAGC,EAAGZ,EAAKU,GAAGC,GAAGE,EAAGb,GACvDE,IAAI,SAAA5B,GACDA,EAAME,QACNiD,MAGK,IAATA,IACAD,EAAYd,GAAGC,GAAGG,SAAU,GAEhCU,EAAYd,GAAGC,GAAGlC,UAAYgD,EAXF,GAgBxC,OAAQD,wCAIEZ,EAAGC,EAAGb,GAChB,IAAM2B,EAAK,GA0CX,OAvCIf,EAAI,GACJe,EAAGtB,KAAKL,EAAKY,EAAI,GAAGC,IAIpBD,EAAIxC,KAAKC,MAAMsB,OAAS,GACxBgC,EAAGtB,KAAKL,EAAKY,EAAI,GAAGC,IAIpBA,EAAI,GACJc,EAAGtB,KAAKL,EAAKY,GAAGC,EAAI,IAIpBA,EAAIzC,KAAKC,MAAMuB,MAAQ,GACvB+B,EAAGtB,KAAKL,EAAKY,GAAGC,EAAI,IAIpBD,EAAI,GAAKC,EAAI,GACbc,EAAGtB,KAAKL,EAAKY,EAAI,GAAGC,EAAI,IAIxBD,EAAI,GAAKC,EAAIzC,KAAKC,MAAMuB,MAAQ,GAChC+B,EAAGtB,KAAKL,EAAKY,EAAI,GAAGC,EAAI,IAIxBD,EAAIxC,KAAKC,MAAMsB,OAAS,GAAKkB,EAAIzC,KAAKC,MAAMuB,MAAQ,GACpD+B,EAAGtB,KAAKL,EAAKY,EAAI,GAAGC,EAAI,IAIxBD,EAAIxC,KAAKC,MAAMsB,OAAS,GAAKkB,EAAI,GACjCc,EAAGtB,KAAKL,EAAKY,EAAI,GAAGC,EAAI,IAGrBc,wCAKP,IAAIH,EAAcpD,KAAKmB,MAAMC,UAC7BgC,EAAYtB,IAAI,SAACC,GACbA,EAAQD,IAAI,SAACE,GACTA,EAAS7B,YAAa,MAG9BH,KAAKwD,SAAS,CACVpC,UAAWgC,wCAKPZ,EAAGC,EAAGb,GAAM,IAAA6B,EAAAzD,KAUpB,OATWA,KAAKsD,cAAcd,EAAGC,EAAGb,GAC/BE,IAAI,SAAA5B,GACAA,EAAMC,aAAeD,EAAMwC,SAAYxC,EAAME,SAC9CwB,EAAK1B,EAAMsC,GAAGtC,EAAMuC,GAAGtC,YAAa,EAChCD,EAAMwC,SACNe,EAAKC,YAAYxD,EAAMsC,EAAGtC,EAAMuC,EAAGb,MAIxCA,0CAMKY,EAAGC,GACf,IAAIkB,GAAM,EAGV,GAAI3D,KAAKmB,MAAMC,UAAUoB,GAAGC,GAAGtC,WAAY,OAAO,KAG9CH,KAAKmB,MAAMC,UAAUoB,GAAGC,GAAGrC,SAC3BJ,KAAK4D,cACLC,MAAM,cAGV,IAAIT,EAAcpD,KAAKmB,MAAMC,UAC7BgC,EAAYZ,GAAGC,GAAGnC,WAAY,EAC9B8C,EAAYZ,GAAGC,GAAGtC,YAAa,EAE3BiD,EAAYZ,GAAGC,GAAGC,UAClBU,EAAcpD,KAAK0D,YAAYlB,EAAGC,EAAGW,IAGrCpD,KAAK8D,UAAUV,GAAaW,SAAW/D,KAAKC,MAAMwB,QAClDkC,GAAM,EACN3D,KAAK4D,cACLC,MAAM,YAGV7D,KAAKwD,SAAS,CACVpC,UAAWgC,EACXzB,UAAW3B,KAAKC,MAAMwB,MAAQzB,KAAKgE,SAASZ,GAAaW,OACzDrC,QAASiC,+CAIEM,EAAGzB,EAAGC,GACrBwB,EAAEC,iBACF,IAAId,EAAcpD,KAAKmB,MAAMC,UACzBK,EAAQzB,KAAKmB,MAAMQ,UACnBgC,GAAM,EAGV,IAAIP,EAAYZ,GAAGC,GAAGtC,WAAtB,CAUA,GARIiD,EAAYZ,GAAGC,GAAGnC,WAClB8C,EAAYZ,GAAGC,GAAGnC,WAAY,EAC9BmB,MAEA2B,EAAYZ,GAAGC,GAAGnC,WAAY,EAC9BmB,KAGU,IAAVA,EAAa,CACb,IAAMI,EAAY7B,KAAKmE,SAASf,GAC1BgB,EAAYpE,KAAKgE,SAASZ,IAChCO,EAAOU,KAAKC,UAAUzC,KAAewC,KAAKC,UAAUF,MAEhDpE,KAAK4D,cACLC,MAAM,YAId7D,KAAKwD,SAAS,CACVpC,UAAWgC,EACXzB,UAAWF,EACXC,QAASiC,yCAIL/B,GAAM,IAAA2C,EAAAvE,KACd,OAAO4B,EAAKE,IAAI,SAACC,GACb,OAAOA,EAAQD,IAAI,SAACE,GAChB,OACIxB,EAAAC,EAAAC,cAAA,MAAA,CAAK8D,IAAKxC,EAASQ,EAAIT,EAAQgC,OAAS/B,EAASS,GAC7CjC,EAAAC,EAAAC,cAAC+D,EAAD,CACI7D,QAAS,WAAA,OAAM2D,EAAKG,gBAAgB1C,EAASQ,EAAGR,EAASS,IACzD3B,MAAO,SAACmD,GAAD,OAAOM,EAAKI,mBAAmBV,EAAGjC,EAASQ,EAAGR,EAASS,IAC9DvC,MAAO8B,IAETD,EAAQA,EAAQgC,OAAS,KAAO/B,EAAYxB,EAAAC,EAAAC,cAAA,MAAA,CAAKH,UAAU,UAAa,0DAOpEqE,GAClBP,KAAKC,UAAUtE,KAAKC,SAAWoE,KAAKC,UAAUM,IAC9C5E,KAAKwD,SAAS,CACVpC,UAAWpB,KAAKsB,cAAcsD,EAAUrD,OAAQqD,EAAUpD,MAAOoD,EAAUnD,OAC3EC,SAAS,EACTC,UAAWiD,EAAUnD,yCAM7B,OACIjB,EAAAC,EAAAC,cAAA,MAAA,CAAKH,UAAU,SACXC,EAAAC,EAAAC,cAAA,MAAA,CAAKH,UAAU,aACXC,EAAAC,EAAAC,cAAA,OAAA,CAAMH,UAAU,QAAhB,UAA+BP,KAAKmB,MAAMQ,WAAiBnB,EAAAC,EAAAC,cAAA,KAAA,MAC3DF,EAAAC,EAAAC,cAAA,OAAA,CAAMH,UAAU,QAAQP,KAAKmB,MAAMO,QAAU,UAAY,KAGzD1B,KAAK6E,YAAY7E,KAAKmB,MAAMC,mBA9SbJ,EAAAA,EAAMC,WCEnC6D,oNAOF3D,MAAQ,CACJI,OAAQ,EACRC,MAAO,EACPC,MAAO,MAGXsD,gBAAkB,WACd,IAAIC,EAAaC,SAASC,cAAc,iBACf,aAArBF,EAAW9E,OACXmB,EAAKmC,SAAS,CACVjC,OAAQ,EACRC,MAAO,EACPC,MAAO,KAGU,iBAArBuD,EAAW9E,OACXmB,EAAKmC,SAAS,CACVjC,OAAQ,GACRC,MAAO,GACPC,MAAO,KAGU,WAArBuD,EAAW9E,OACXmB,EAAKmC,SAAS,CACVjC,OAAQ,GACRC,MAAO,GACPC,MAAO,8EAKV,IAAA0D,EAC4BnF,KAAKmB,MAA9BI,EADH4D,EACG5D,OAAQC,EADX2D,EACW3D,MAAOC,EADlB0D,EACkB1D,MACvB,OACIjB,EAAAC,EAAAC,cAAA,MAAA,CAAKH,UAAU,QACXC,EAAAC,EAAAC,cAAA,MAAA,CAAKH,UAAU,aACXC,EAAAC,EAAAC,cAAA,KAAA,KAAA,+BACAF,EAAAC,EAAAC,cAAA,OAAA,CAAMH,UAAU,QAAhB,SACIC,EAAAC,EAAAC,cAAA,SAAA,CAAQ0E,GAAG,gBACP5E,EAAAC,EAAAC,cAAA,SAAA,CAAQR,MAAM,YAAd,cACAM,EAAAC,EAAAC,cAAA,SAAA,CAAQR,MAAM,gBAAd,kBACAM,EAAAC,EAAAC,cAAA,SAAA,CAAQR,MAAM,UAAd,gBAGRM,EAAAC,EAAAC,cAAA,SAAA,CAAQE,QAASZ,KAAK+E,iBAAtB,UAGJvE,EAAAC,EAAAC,cAAC2E,EAAD,CAAO9D,OAAQA,EAAQC,MAAOA,EAAOC,MAAOA,IAE5CjB,EAAAC,EAAAC,cAAA,MAAA,CAAKH,UAAU,aACXC,EAAAC,EAAAC,cAAA,KAAA,KAAA,mCAzDDM,EAAAA,EAAMC,YAiEzBqE,EAAAA,EAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAD,MAAUP,SAASQ,eAAe\",\"sourcesContent\":[\"import React from 'react';\\r\\n\\r\\nexport default class Cell extends React.Component {\\r\\n\\r\\n\\r\\n    getValue(){\\r\\n        if (!this.props.value.isRevealed){\\r\\n            return this.props.value.isFlagged ? \\\"â›³\\\" : null;\\r\\n        }\\r\\n        if (this.props.value.isMine) {\\r\\n            return \\\"ðŸ’£\\\";\\r\\n        }\\r\\n        if(this.props.value.neighbour === 0 ){\\r\\n            return null;\\r\\n        }\\r\\n        return this.props.value.neighbour;\\r\\n    }\\r\\n\\r\\n    render(){\\r\\n        let className = \\\"cell\\\" + (this.props.value.isRevealed ? \\\"\\\" : \\\" hidden\\\") + (this.props.value.isMine ? \\\" is-mine\\\" : \\\"\\\") + (this.props.value.isFlagged ? \\\" is-flag\\\" : \\\"\\\");\\r\\n\\r\\n\\r\\n        return (\\r\\n            <div ref=\\\"cell\\\" onClick={this.props.onClick} className={className} onContextMenu={this.props.cMenu}>\\r\\n                {this.getValue()}\\r\\n            </div>\\r\\n        );\\r\\n    }\\r\\n}\",\"import React from 'react';\\r\\nimport Cell from './Cell';\\r\\n\\r\\nexport default class Board extends React.Component {\\r\\n    state = {\\r\\n        boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\\r\\n        gameWon: false,\\r\\n        mineCount: this.props.mines,\\r\\n    };\\r\\n\\r\\n    // get mines\\r\\n    getMines(data) {\\r\\n        let mineArray = [];\\r\\n\\r\\n        data.map(datarow => {\\r\\n            datarow.map((dataitem) => {\\r\\n                if (dataitem.isMine) {\\r\\n                    mineArray.push(dataitem);\\r\\n                }\\r\\n            });\\r\\n        });\\r\\n\\r\\n        return mineArray;\\r\\n    }\\r\\n\\r\\n    // get Flags\\r\\n    getFlags(data) {\\r\\n        let mineArray = [];\\r\\n\\r\\n        data.map(datarow => {\\r\\n            datarow.map((dataitem) => {\\r\\n                if (dataitem.isFlagged) {\\r\\n                    mineArray.push(dataitem);\\r\\n                }\\r\\n            });\\r\\n        });\\r\\n\\r\\n        return mineArray;\\r\\n    }\\r\\n\\r\\n    // get Hidden cells\\r\\n    getHidden(data) {\\r\\n        let mineArray = [];\\r\\n\\r\\n        data.map(datarow => {\\r\\n            datarow.map((dataitem) => {\\r\\n                if (!dataitem.isRevealed) {\\r\\n                    mineArray.push(dataitem);\\r\\n                }\\r\\n            });\\r\\n        });\\r\\n\\r\\n        return mineArray;\\r\\n    }\\r\\n\\r\\n    // get random number given a dimension\\r\\n    getRandomNumber(dimension) {\\r\\n        // return Math.floor(Math.random() * dimension);\\r\\n        return Math.floor((Math.random() * 1000) + 1) % dimension;\\r\\n    }\\r\\n\\r\\n    // Gets initial board data\\r\\n    initBoardData(height, width, mines) {\\r\\n        let data = [];\\r\\n\\r\\n        for (let i = 0; i < height; i++) {\\r\\n            data.push([]);\\r\\n            for (let j = 0; j < width; j++) {\\r\\n                data[i][j] = {\\r\\n                    x: i,\\r\\n                    y: j,\\r\\n                    isMine: false,\\r\\n                    neighbour: 0,\\r\\n                    isRevealed: false,\\r\\n                    isEmpty: false,\\r\\n                    isFlagged: false,\\r\\n                };\\r\\n            }\\r\\n        }\\r\\n        data = this.plantMines(data, height, width, mines);\\r\\n        data = this.getNeighbours(data, height, width);\\r\\n        console.log(data);\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    // plant mines on the board\\r\\n    plantMines(data, height, width, mines) {\\r\\n        let randomx, randomy, minesPlanted = 0;\\r\\n\\r\\n        while (minesPlanted < mines) {\\r\\n            randomx = this.getRandomNumber(width);\\r\\n            randomy = this.getRandomNumber(height);\\r\\n            if (!(data[randomx][randomy].isMine)) {\\r\\n                data[randomx][randomy].isMine = true;\\r\\n                minesPlanted++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (data);\\r\\n    }\\r\\n\\r\\n    // get number of neighbouring mines for each board cell\\r\\n    getNeighbours(data, height, width) {\\r\\n        let updatedData = data, index = 0;\\r\\n\\r\\n        for (let i = 0; i < height; i++) {\\r\\n            for (let j = 0; j < width; j++) {\\r\\n                if (data[i][j].isMine !== true) {\\r\\n                    let mine = 0;\\r\\n                    const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\\r\\n                    area.map(value => {\\r\\n                        if (value.isMine) {\\r\\n                            mine++;\\r\\n                        }\\r\\n                    });\\r\\n                    if (mine === 0) {\\r\\n                        updatedData[i][j].isEmpty = true;\\r\\n                    }\\r\\n                    updatedData[i][j].neighbour = mine;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (updatedData);\\r\\n    };\\r\\n\\r\\n    // looks for neighbouring cells and returns them\\r\\n    traverseBoard(x, y, data) {\\r\\n        const el = [];\\r\\n\\r\\n        //up\\r\\n        if (x > 0) {\\r\\n            el.push(data[x - 1][y]);\\r\\n        }\\r\\n\\r\\n        //down\\r\\n        if (x < this.props.height - 1) {\\r\\n            el.push(data[x + 1][y]);\\r\\n        }\\r\\n\\r\\n        //left\\r\\n        if (y > 0) {\\r\\n            el.push(data[x][y - 1]);\\r\\n        }\\r\\n\\r\\n        //right\\r\\n        if (y < this.props.width - 1) {\\r\\n            el.push(data[x][y + 1]);\\r\\n        }\\r\\n\\r\\n        // top left\\r\\n        if (x > 0 && y > 0) {\\r\\n            el.push(data[x - 1][y - 1]);\\r\\n        }\\r\\n\\r\\n        // top right\\r\\n        if (x > 0 && y < this.props.width - 1) {\\r\\n            el.push(data[x - 1][y + 1]);\\r\\n        }\\r\\n\\r\\n        // bottom right\\r\\n        if (x < this.props.height - 1 && y < this.props.width - 1) {\\r\\n            el.push(data[x + 1][y + 1]);\\r\\n        }\\r\\n\\r\\n        // bottom left\\r\\n        if (x < this.props.height - 1 && y > 0) {\\r\\n            el.push(data[x + 1][y - 1]);\\r\\n        }\\r\\n\\r\\n        return el;\\r\\n    }\\r\\n\\r\\n    // reveals the whole board\\r\\n    revealBoard() {\\r\\n        let updatedData = this.state.boardData;\\r\\n        updatedData.map((datarow) => {\\r\\n            datarow.map((dataitem) => {\\r\\n                dataitem.isRevealed = true;\\r\\n            });\\r\\n        });\\r\\n        this.setState({\\r\\n            boardData: updatedData\\r\\n        })\\r\\n    }\\r\\n\\r\\n    /* reveal logic for empty cell */\\r\\n    revealEmpty(x, y, data) {\\r\\n        let area = this.traverseBoard(x, y, data);\\r\\n        area.map(value => {\\r\\n            if (!value.isRevealed && (value.isEmpty || !value.isMine)) {\\r\\n                data[value.x][value.y].isRevealed = true;\\r\\n                if (value.isEmpty) {\\r\\n                    this.revealEmpty(value.x, value.y, data);\\r\\n                }\\r\\n            }\\r\\n        });\\r\\n        return data;\\r\\n\\r\\n    }\\r\\n\\r\\n    // Handle User Events\\r\\n\\r\\n    handleCellClick(x, y) {\\r\\n        let win = false;\\r\\n\\r\\n        // check if revealed. return if true.\\r\\n        if (this.state.boardData[x][y].isRevealed) return null;\\r\\n\\r\\n        // check if mine. game over if true\\r\\n        if (this.state.boardData[x][y].isMine) {\\r\\n            this.revealBoard();\\r\\n            alert(\\\"game over\\\");\\r\\n        }\\r\\n\\r\\n        let updatedData = this.state.boardData;\\r\\n        updatedData[x][y].isFlagged = false;\\r\\n        updatedData[x][y].isRevealed = true;\\r\\n\\r\\n        if (updatedData[x][y].isEmpty) {\\r\\n            updatedData = this.revealEmpty(x, y, updatedData);\\r\\n        }\\r\\n\\r\\n        if (this.getHidden(updatedData).length === this.props.mines) {\\r\\n            win = true;\\r\\n            this.revealBoard();\\r\\n            alert(\\\"You Win\\\");\\r\\n        }\\r\\n\\r\\n        this.setState({\\r\\n            boardData: updatedData,\\r\\n            mineCount: this.props.mines - this.getFlags(updatedData).length,\\r\\n            gameWon: win,\\r\\n        });\\r\\n    }\\r\\n\\r\\n    _handleContextMenu(e, x, y) {\\r\\n        e.preventDefault();\\r\\n        let updatedData = this.state.boardData;\\r\\n        let mines = this.state.mineCount;\\r\\n        let win = false;\\r\\n\\r\\n        // check if already revealed\\r\\n        if (updatedData[x][y].isRevealed) return;\\r\\n\\r\\n        if (updatedData[x][y].isFlagged) {\\r\\n            updatedData[x][y].isFlagged = false;\\r\\n            mines++;\\r\\n        } else {\\r\\n            updatedData[x][y].isFlagged = true;\\r\\n            mines--;\\r\\n        }\\r\\n\\r\\n        if (mines === 0) {\\r\\n            const mineArray = this.getMines(updatedData);\\r\\n            const FlagArray = this.getFlags(updatedData);\\r\\n            win = (JSON.stringify(mineArray) === JSON.stringify(FlagArray));\\r\\n            if (win) {\\r\\n                this.revealBoard();\\r\\n                alert(\\\"You Win\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.setState({\\r\\n            boardData: updatedData,\\r\\n            mineCount: mines,\\r\\n            gameWon: win,\\r\\n        });\\r\\n    }\\r\\n\\r\\n    renderBoard(data) {\\r\\n        return data.map((datarow) => {\\r\\n            return datarow.map((dataitem) => {\\r\\n                return (\\r\\n                    <div key={dataitem.x * datarow.length + dataitem.y}>\\r\\n                        <Cell\\r\\n                            onClick={() => this.handleCellClick(dataitem.x, dataitem.y)}\\r\\n                            cMenu={(e) => this._handleContextMenu(e, dataitem.x, dataitem.y)}\\r\\n                            value={dataitem}\\r\\n                        />\\r\\n                        {(datarow[datarow.length - 1] === dataitem) ? <div className=\\\"clear\\\" /> : \\\"\\\"}\\r\\n                    </div>);\\r\\n            })\\r\\n        });\\r\\n\\r\\n    }\\r\\n    // Component methods\\r\\n    componentWillReceiveProps(nextProps) {\\r\\n        if (JSON.stringify(this.props) !== JSON.stringify(nextProps)) {\\r\\n            this.setState({\\r\\n                boardData: this.initBoardData(nextProps.height, nextProps.width, nextProps.mines),\\r\\n                gameWon: false,\\r\\n                mineCount: nextProps.mines,\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        return (\\r\\n            <div className=\\\"board\\\">\\r\\n                <div className=\\\"game-info\\\">\\r\\n                    <span className=\\\"info\\\">mines: {this.state.mineCount}</span><br />\\r\\n                    <span className=\\\"info\\\">{this.state.gameWon ? \\\"You Win\\\" : \\\"\\\"}</span>\\r\\n                </div>\\r\\n                {\\r\\n                    this.renderBoard(this.state.boardData)\\r\\n                }\\r\\n            </div>\\r\\n        );\\r\\n    }\\r\\n}\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport Board from './components/Board';\\nimport './index.css';\\n\\nclass Game extends React.Component {\\n\\n    /*\\n    Beginner: 10 mines, 8x8 board\\n    Intermediate: 20 mines, 12x12 board\\n    Expert: 40 mines, 16x16 board\\n    */\\n    state = {\\n        height: 8,\\n        width: 8,\\n        mines: 10,\\n    };\\n\\n    handleGameStart = () => {\\n        let difficulty = document.querySelector(\\\"#level_select\\\");\\n        if (difficulty.value === \\\"beginner\\\") {\\n            this.setState({\\n                height: 8,\\n                width: 8,\\n                mines: 10,\\n            });\\n        }\\n        if (difficulty.value === \\\"intermediate\\\") {\\n            this.setState({\\n                height: 12,\\n                width: 12,\\n                mines: 20,\\n            });\\n        }\\n        if (difficulty.value === \\\"expert\\\") {\\n            this.setState({\\n                height: 16,\\n                width: 16,\\n                mines: 40,\\n            });\\n        }\\n    }\\n\\n    render() {\\n        const { height, width, mines } = this.state;\\n        return (\\n            <div className=\\\"game\\\">\\n                <div className=\\\"game-info\\\">\\n                    <h4>Select your level and Start</h4>\\n                    <span className=\\\"info\\\">Level:\\n                        <select id=\\\"level_select\\\">\\n                            <option value=\\\"beginner\\\"> Beginner </option>\\n                            <option value=\\\"intermediate\\\"> Intermediate </option>\\n                            <option value=\\\"expert\\\"> Advanced </option>\\n                        </select>\\n                    </span>\\n                    <button onClick={this.handleGameStart}>Start</button>\\n                </div>\\n\\n                <Board height={height} width={width} mines={mines} />\\n\\n                <div className=\\\"game-info\\\">\\n                    <h4>Subproject by Kyle Lee</h4>\\n                </div>\\n                \\n            </div>\\n        );\\n    }\\n}\\n\\nReactDOM.render(<Game />, document.getElementById('root'));\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,t,a){},15:function(e,t,a){\"use strict\";a.r(t);var n=a(1),i=a(2),r=a(4),s=a(3),o=a(5),l=a(0),u=a.n(l),h=a(7),c=a.n(h),p=function(e){function t(){return Object(n.a)(this,t),Object(r.a)(this,Object(s.a)(t).apply(this,arguments))}return Object(o.a)(t,e),Object(i.a)(t,[{key:\"getValue\",value:function(){return this.props.value.isRevealed?this.props.value.isMine?\"\\ud83d\\udca3\":0===this.props.value.neighbour?null:this.props.value.neighbour:this.props.value.isFlagged?\"\\u26f3\":null}},{key:\"render\",value:function(){var e=\"cell\"+(this.props.value.isRevealed?\"\":\" hidden\")+(this.props.value.isMine?\" is-mine\":\"\")+(this.props.value.isFlagged?\" is-flag\":\"\");return u.a.createElement(\"div\",{ref:\"cell\",onClick:this.props.onClick,className:e,onContextMenu:this.props.cMenu},this.getValue())}}]),t}(u.a.Component),m=function(e){function t(){var e,a;Object(n.a)(this,t);for(var i=arguments.length,o=new Array(i),l=0;l<i;l++)o[l]=arguments[l];return(a=Object(r.a)(this,(e=Object(s.a)(t)).call.apply(e,[this].concat(o)))).state={boardData:a.initBoardData(a.props.height,a.props.width,a.props.mines),gameWon:!1,mineCount:a.props.mines},a}return Object(o.a)(t,e),Object(i.a)(t,[{key:\"getMines\",value:function(e){var t=[];return e.map(function(e){e.map(function(e){e.isMine&&t.push(e)})}),t}},{key:\"getFlags\",value:function(e){var t=[];return e.map(function(e){e.map(function(e){e.isFlagged&&t.push(e)})}),t}},{key:\"getHidden\",value:function(e){var t=[];return e.map(function(e){e.map(function(e){e.isRevealed||t.push(e)})}),t}},{key:\"getRandomNumber\",value:function(e){return Math.floor(1e3*Math.random()+1)%e}},{key:\"initBoardData\",value:function(e,t,a){for(var n=[],i=0;i<e;i++){n.push([]);for(var r=0;r<t;r++)n[i][r]={x:i,y:r,isMine:!1,neighbour:0,isRevealed:!1,isEmpty:!1,isFlagged:!1}}return n=this.plantMines(n,e,t,a),n=this.getNeighbours(n,e,t),console.log(n),n}},{key:\"plantMines\",value:function(e,t,a,n){for(var i,r,s=0;s<n;)i=this.getRandomNumber(a),r=this.getRandomNumber(t),e[i][r].isMine||(e[i][r].isMine=!0,s++);return e}},{key:\"getNeighbours\",value:function(e,t,a){for(var n=this,i=e,r=0;r<t;r++)for(var s=0;s<a;s++)!0!==e[r][s].isMine&&function(){var t=0;n.traverseBoard(e[r][s].x,e[r][s].y,e).map(function(e){e.isMine&&t++}),0===t&&(i[r][s].isEmpty=!0),i[r][s].neighbour=t}();return i}},{key:\"traverseBoard\",value:function(e,t,a){var n=[];return e>0&&n.push(a[e-1][t]),e<this.props.height-1&&n.push(a[e+1][t]),t>0&&n.push(a[e][t-1]),t<this.props.width-1&&n.push(a[e][t+1]),e>0&&t>0&&n.push(a[e-1][t-1]),e>0&&t<this.props.width-1&&n.push(a[e-1][t+1]),e<this.props.height-1&&t<this.props.width-1&&n.push(a[e+1][t+1]),e<this.props.height-1&&t>0&&n.push(a[e+1][t-1]),n}},{key:\"revealBoard\",value:function(){var e=this.state.boardData;e.map(function(e){e.map(function(e){e.isRevealed=!0})}),this.setState({boardData:e})}},{key:\"revealEmpty\",value:function(e,t,a){var n=this;return this.traverseBoard(e,t,a).map(function(e){e.isRevealed||!e.isEmpty&&e.isMine||(a[e.x][e.y].isRevealed=!0,e.isEmpty&&n.revealEmpty(e.x,e.y,a))}),a}},{key:\"handleCellClick\",value:function(e,t){var a=!1;if(this.state.boardData[e][t].isRevealed)return null;this.state.boardData[e][t].isMine&&(this.revealBoard(),alert(\"game over\"));var n=this.state.boardData;n[e][t].isFlagged=!1,n[e][t].isRevealed=!0,n[e][t].isEmpty&&(n=this.revealEmpty(e,t,n)),this.getHidden(n).length===this.props.mines&&(a=!0,this.revealBoard(),alert(\"You Win\")),this.setState({boardData:n,mineCount:this.props.mines-this.getFlags(n).length,gameWon:a})}},{key:\"_handleContextMenu\",value:function(e,t,a){e.preventDefault();var n=this.state.boardData,i=this.state.mineCount,r=!1;if(!n[t][a].isRevealed){if(n[t][a].isFlagged?(n[t][a].isFlagged=!1,i++):(n[t][a].isFlagged=!0,i--),0===i){var s=this.getMines(n),o=this.getFlags(n);(r=JSON.stringify(s)===JSON.stringify(o))&&(this.revealBoard(),alert(\"You Win\"))}this.setState({boardData:n,mineCount:i,gameWon:r})}}},{key:\"renderBoard\",value:function(e){var t=this;return e.map(function(e){return e.map(function(a){return u.a.createElement(\"div\",{key:a.x*e.length+a.y},u.a.createElement(p,{onClick:function(){return t.handleCellClick(a.x,a.y)},cMenu:function(e){return t._handleContextMenu(e,a.x,a.y)},value:a}),e[e.length-1]===a?u.a.createElement(\"div\",{className:\"clear\"}):\"\")})})}},{key:\"componentWillReceiveProps\",value:function(e){JSON.stringify(this.props)!==JSON.stringify(e)&&this.setState({boardData:this.initBoardData(e.height,e.width,e.mines),gameWon:!1,mineCount:e.mines})}},{key:\"render\",value:function(){return u.a.createElement(\"div\",{className:\"board\"},u.a.createElement(\"div\",{className:\"game-info\"},u.a.createElement(\"span\",{className:\"info\"},\"mines: \",this.state.mineCount),u.a.createElement(\"br\",null),u.a.createElement(\"span\",{className:\"info\"},this.state.gameWon?\"You Win\":\"\")),this.renderBoard(this.state.boardData))}}]),t}(u.a.Component),d=(a(14),function(e){function t(){var e,a;Object(n.a)(this,t);for(var i=arguments.length,o=new Array(i),l=0;l<i;l++)o[l]=arguments[l];return(a=Object(r.a)(this,(e=Object(s.a)(t)).call.apply(e,[this].concat(o)))).state={height:8,width:8,mines:10},a.handleGameStart=function(){var e=document.querySelector(\"#level_select\");\"beginner\"===e.value&&a.setState({height:8,width:8,mines:10}),\"intermediate\"===e.value&&a.setState({height:12,width:12,mines:20}),\"expert\"===e.value&&a.setState({height:16,width:16,mines:40})},a}return Object(o.a)(t,e),Object(i.a)(t,[{key:\"render\",value:function(){var e=this.state,t=e.height,a=e.width,n=e.mines;return u.a.createElement(\"div\",{className:\"game\"},u.a.createElement(\"div\",{className:\"game-info\"},u.a.createElement(\"h4\",null,\"Select your level and Start\"),u.a.createElement(\"span\",{className:\"info\"},\"Level:\",u.a.createElement(\"select\",{id:\"level_select\"},u.a.createElement(\"option\",{value:\"beginner\"},\" Beginner \"),u.a.createElement(\"option\",{value:\"intermediate\"},\" Intermediate \"),u.a.createElement(\"option\",{value:\"expert\"},\" Advanced \"))),u.a.createElement(\"button\",{onClick:this.handleGameStart},\"Start\")),u.a.createElement(m,{height:t,width:a,mines:n}),u.a.createElement(\"div\",{className:\"game-info\"},u.a.createElement(\"h4\",null,\"Subproject by Kyle Lee\")))}}]),t}(u.a.Component));c.a.render(u.a.createElement(d,null),document.getElementById(\"root\"))},8:function(e,t,a){e.exports=a(15)}},[[8,1,2]]]);","extractedComments":[]}